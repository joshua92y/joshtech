# .github/workflows/deploy-nextjs-ghcr.yml

name: Build → GHCR + R2 + Cloudflare Pages Deploy

on:
  push:
    paths:
      - 'apps/frontend/**'
      - '.github/workflows/deploy-nextjs-ghcr.yml'
  workflow_dispatch: # ✅ 수동 실행 버튼 추가

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3


      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container


      - name: 🟦 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 22.15.0

      - name: 🚀 Upgrade npm to latest
        run: npm install -g npm@latest
      
      - name: 🗂️ Cache NPM & Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            /home/runner/.cache/next-swc
          key: Linux-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.js', '**/*.tsx') }}
          restore-keys: |
            Linux-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⛅ Install Wrangler CLI
        run: npm install -g wrangler
      
      - name: Preload SWC
        run: npx next --version
      
      # 1️⃣ Next.js Build + SSR용 .vercel/output 생성
      - name: 🚀 Build & Prepare (Next.js → Cloudflare Pages)
        run: npm run build && npm run cf:build

      - name: 🐳 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🐳 Build & Push Docker image to GHCR (with cache)
        uses: docker/build-push-action@v5
        with:
          context: apps/frontend
          file: apps/frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/joshtech-next:latest
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ☁️ Upload static_assets to Cloudflare R2
        run: |
          curl -LO https://downloads.rclone.org/rclone-current-linux-amd64.deb
          sudo dpkg -i rclone-current-linux-amd64.deb

          # rclone 설정 파일 생성
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [remote-r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY }}
          secret_access_key = ${{ secrets.R2_SECRET_KEY }}
          endpoint = https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          region = auto
          acl = public-read
          EOF

          rclone sync ./static_assets remote-r2:joshtech \
            --s3-endpoint https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --s3-access-key-id ${{ secrets.R2_ACCESS_KEY }} \
            --s3-secret-access-key ${{ secrets.R2_SECRET_KEY }} \
            --s3-region auto \
            --s3-acl public-read \
            --s3-provider Cloudflare

      - name: 🚀 Deploy to Cloudflare Pages (with SSR)
        run: wrangler pages deploy .vercel/output/static --project-name=joshtech-frontend --branch=main
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
